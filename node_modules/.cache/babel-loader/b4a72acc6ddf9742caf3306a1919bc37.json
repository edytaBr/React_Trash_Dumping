{"ast":null,"code":"var _jsxFileName = \"/home/edyta/react/onClickMarker/map-app/src/map.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport InteractiveMap, { Marker } from \"react-map-gl\";\n/**\n * Note you have to pass a child to <Marker />\n * as it just places an element at the correct\n * position.\n */\n\nfunction Maps() {\n  /**\n   * Store marker locations in state\n   * On click, grab the lngLat from the event\n   * and add it to the state.\n   */\n  const [markers, setMarkers] = React.useState([]);\n\n  const handleClick = ({\n    lngLat: [longitude, latitude]\n  }) => setMarkers(markers => [...markers, {\n    longitude,\n    latitude\n  }]);\n  /**\n   * Manage viewport in state\n   */\n\n\n  const [viewport, setViewport] = React.useState({\n    latitude: 55,\n    longitude: 19,\n    zoom: 14.5,\n    pitch: 40,\n    bearing: 0\n  });\n  return /*#__PURE__*/React.createElement(InteractiveMap // onClick, capture the pointer event so we can\n  // get the lngLat of the click.\n  , Object.assign({\n    onClick: handleClick // required for interactivity\n    ,\n    width: \"100vw\",\n    height: \"100vh\",\n    mapboxApiAccessToken: \"pk.eyJ1IjoiZ2lzZmVlZGJhY2siLCJhIjoiY2l2eDJndmtjMDFkeTJvcHM4YTNheXZtNyJ9.-HNJNch_WwLIAifPgzW2Ig\",\n    onViewportChange: viewport => setViewport(viewport)\n  }, viewport, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }), markers.length ? markers.map((m, i) =>\n  /*#__PURE__*/\n  // <Marker /> just places its children at the right lat lng.\n  React.createElement(Marker, Object.assign({}, m, {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }), `Clicked here: \\n ${m.longitude}, ${m.latitude}`)) : null);\n}\n\nexport default Maps;","map":{"version":3,"sources":["/home/edyta/react/onClickMarker/map-app/src/map.js"],"names":["React","ReactDOM","InteractiveMap","Marker","Maps","markers","setMarkers","useState","handleClick","lngLat","longitude","latitude","viewport","setViewport","zoom","pitch","bearing","length","map","m","i"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,cAAP,IAAyBC,MAAzB,QAAuC,cAAvC;AAEA;;;;;;AAMA,SAASC,IAAT,GAAgB;AACd;;;;;AAKA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,KAAK,CAACO,QAAN,CAAe,EAAf,CAA9B;;AACA,QAAMC,WAAW,GAAG,CAAC;AAAEC,IAAAA,MAAM,EAAE,CAACC,SAAD,EAAYC,QAAZ;AAAV,GAAD,KAClBL,UAAU,CAACD,OAAO,IAAI,CAAC,GAAGA,OAAJ,EAAa;AAAEK,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAAb,CAAZ,CADZ;AAGA;;;;;AAGA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bb,KAAK,CAACO,QAAN,CAAe;AAC7CI,IAAAA,QAAQ,EAAE,EADmC;AAE7CD,IAAAA,SAAS,EAAE,EAFkC;AAG7CI,IAAAA,IAAI,EAAE,IAHuC;AAI7CC,IAAAA,KAAK,EAAE,EAJsC;AAK7CC,IAAAA,OAAO,EAAE;AALoC,GAAf,CAAhC;AAQA,sBACE,oBAAC,cAAD,CACE;AACA;AAFF;AAGE,IAAA,OAAO,EAAER,WAHX,CAIE;AAJF;AAKE,IAAA,KAAK,EAAC,OALR;AAME,IAAA,MAAM,EAAC,OANT;AAOE,IAAA,oBAAoB,EAAC,gGAPvB;AAQE,IAAA,gBAAgB,EAAEI,QAAQ,IAAIC,WAAW,CAACD,QAAD;AAR3C,KASMA,QATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWGP,OAAO,CAACY,MAAR,GACGZ,OAAO,CAACa,GAAR,CAAY,CAACC,CAAD,EAAIC,CAAJ;AAAA;AACV;AACA,sBAAC,MAAD,oBAAYD,CAAZ;AAAe,IAAA,GAAG,EAAEC,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACI,oBAAmBD,CAAC,CAACT,SAAU,KAAIS,CAAC,CAACR,QAAS,EADlD,CAFF,CADH,GAOG,IAlBN,CADF;AAsBD;;AAED,eAAeP,IAAf","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport InteractiveMap, { Marker } from \"react-map-gl\";\n\n/**\n * Note you have to pass a child to <Marker />\n * as it just places an element at the correct\n * position.\n */\n\nfunction Maps() {\n  /**\n   * Store marker locations in state\n   * On click, grab the lngLat from the event\n   * and add it to the state.\n   */\n  const [markers, setMarkers] = React.useState([]);\n  const handleClick = ({ lngLat: [longitude, latitude] }) =>\n    setMarkers(markers => [...markers, { longitude, latitude }]);\n\n  /**\n   * Manage viewport in state\n   */\n  const [viewport, setViewport] = React.useState({\n    latitude: 55,\n    longitude: 19,\n    zoom: 14.5,\n    pitch: 40,\n    bearing: 0\n  });\n\n  return (\n    <InteractiveMap\n      // onClick, capture the pointer event so we can\n      // get the lngLat of the click.\n      onClick={handleClick}\n      // required for interactivity\n      width=\"100vw\"\n      height=\"100vh\"\n      mapboxApiAccessToken=\"pk.eyJ1IjoiZ2lzZmVlZGJhY2siLCJhIjoiY2l2eDJndmtjMDFkeTJvcHM4YTNheXZtNyJ9.-HNJNch_WwLIAifPgzW2Ig\"\n      onViewportChange={viewport => setViewport(viewport)}\n      {...viewport}\n    >\n      {markers.length\n        ? markers.map((m, i) => (\n            // <Marker /> just places its children at the right lat lng.\n            <Marker {...m} key={i}>\n              {`Clicked here: \\n ${m.longitude}, ${m.latitude}`}\n            </Marker>\n          ))\n        : null}\n    </InteractiveMap>\n  );\n}\n\nexport default Maps;\n"]},"metadata":{},"sourceType":"module"}